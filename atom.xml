<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YuriCode</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-01-03T15:33:26.298Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LunaMyth</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STL容器</title>
    <link href="http://example.com/2025/01/03/STL%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2025/01/03/STL%E5%AE%B9%E5%99%A8/</id>
    <published>2025-01-03T01:13:32.000Z</published>
    <updated>2025-01-03T15:33:26.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><p>STL（Standard Template Library）是C++标准库的一部分，提供了一组通用的数据结构和算法，以便开发者能高效地处理常见的编程任务</p><span id="more"></span><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size()  返回元素个数</span></span><br><span class="line"><span class="comment">// empty()  返回是否为空</span></span><br><span class="line"><span class="comment">// clear()  清空</span></span><br><span class="line"><span class="comment">// front()/back()</span></span><br><span class="line"><span class="comment">// push_back()/pop_back()</span></span><br><span class="line"><span class="comment">// begin()/end()</span></span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"><span class="comment">// 支持比较运算，按字典序</span></span><br></pre></td></tr></table></figure><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first, 第一个元素</span></span><br><span class="line"><span class="comment">// second, 第二个元素</span></span><br><span class="line"><span class="comment">// 支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size()/length()  返回字符串长度</span></span><br><span class="line"><span class="comment">// empty()</span></span><br><span class="line"><span class="comment">// clear()</span></span><br><span class="line"><span class="comment">// substr(起始下标，(子串长度))  返回子串</span></span><br><span class="line"><span class="comment">// c_str()  返回字符串所在字符数组的起始地址</span></span><br></pre></td></tr></table></figure><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size()</span></span><br><span class="line"><span class="comment">// empty()</span></span><br><span class="line"><span class="comment">// push()  向队尾插入一个元素</span></span><br><span class="line"><span class="comment">// front()  返回队头元素</span></span><br><span class="line"><span class="comment">// back()  返回队尾元素</span></span><br><span class="line"><span class="comment">// pop()  弹出队头元素</span></span><br></pre></td></tr></table></figure><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size()</span></span><br><span class="line"><span class="comment">// empty()</span></span><br><span class="line"><span class="comment">// push()  插入一个元素</span></span><br><span class="line"><span class="comment">// top()  返回堆顶元素</span></span><br><span class="line"><span class="comment">// pop()  弹出堆顶元素</span></span><br><span class="line"><span class="comment">// 定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;</span></span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size()</span></span><br><span class="line"><span class="comment">// empty()</span></span><br><span class="line"><span class="comment">// push()  向栈顶插入一个元素</span></span><br><span class="line"><span class="comment">// top()  返回栈顶元素</span></span><br><span class="line"><span class="comment">// pop()  弹出栈顶元素</span></span><br></pre></td></tr></table></figure><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size()</span></span><br><span class="line"><span class="comment">// empty()</span></span><br><span class="line"><span class="comment">// clear()</span></span><br><span class="line"><span class="comment">// front()/back()</span></span><br><span class="line"><span class="comment">// push_back()/pop_back()</span></span><br><span class="line"><span class="comment">// push_front()/pop_front()</span></span><br><span class="line"><span class="comment">// begin()/end()</span></span><br><span class="line"><span class="comment">// []</span></span><br></pre></td></tr></table></figure><h3 id="set-map-multiset-multimap"><a href="#set-map-multiset-multimap" class="headerlink" title="set map multiset multimap"></a>set map multiset multimap</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基于平衡二叉树（红黑树）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size()</span></span><br><span class="line"><span class="comment">// empty()</span></span><br><span class="line"><span class="comment">// clear()</span></span><br><span class="line"><span class="comment">// begin()/end()</span></span><br><span class="line"><span class="comment">// ++, -- 返回前驱和后继，时间复杂度 O(logn)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set/multiset</span></span><br><span class="line"><span class="comment">//     insert()  插入一个数</span></span><br><span class="line"><span class="comment">//     find()  查找一个数</span></span><br><span class="line"><span class="comment">//     count()  返回某一个数的个数</span></span><br><span class="line"><span class="comment">//     erase()</span></span><br><span class="line"><span class="comment">//         (1) 输入是一个数x，删除所有x   O(k + logn)</span></span><br><span class="line"><span class="comment">//         (2) 输入一个迭代器，删除这个迭代器</span></span><br><span class="line"><span class="comment">//     lower_bound()/upper_bound()</span></span><br><span class="line"><span class="comment">//         lower_bound(x)  返回大于等于x的最小的数的迭代器</span></span><br><span class="line"><span class="comment">//         upper_bound(x)  返回大于x的最小的数的迭代器</span></span><br><span class="line"><span class="comment">// map/multimap</span></span><br><span class="line"><span class="comment">//     insert()  插入的数是一个pair</span></span><br><span class="line"><span class="comment">//     erase()  输入的参数是pair或者迭代器</span></span><br><span class="line"><span class="comment">//     find()</span></span><br><span class="line"><span class="comment">//     []  注意multimap不支持此操作。 时间复杂度是 O(logn)</span></span><br><span class="line"><span class="comment">//     lower_bound()/upper_bound()</span></span><br></pre></td></tr></table></figure><h3 id="unordered-set-unordered-map-unordered-multiset-unordered-multimap"><a href="#unordered-set-unordered-map-unordered-multiset-unordered-multimap" class="headerlink" title="unordered_set unordered_map unordered_multiset unordered_multimap"></a>unordered_set unordered_map unordered_multiset unordered_multimap</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和上面类似，增删改查的时间复杂度是 O(1)</span></span><br><span class="line"><span class="comment">// 不支持 lower_bound()/upper_bound()， 迭代器的++，--</span></span><br></pre></td></tr></table></figure><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bitset&lt;10000&gt; s;</span></span><br><span class="line"><span class="comment">// ~, &amp;, |, ^</span></span><br><span class="line"><span class="comment">// &gt;&gt;, &lt;&lt;</span></span><br><span class="line"><span class="comment">// ==, !=</span></span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// count()  返回有多少个1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// any()  判断是否至少有一个1</span></span><br><span class="line"><span class="comment">// none()  判断是否全为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set()  把所有位置成1</span></span><br><span class="line"><span class="comment">// set(k, v)  将第k位变成v</span></span><br><span class="line"><span class="comment">// reset()  把所有位变成0</span></span><br><span class="line"><span class="comment">// flip()  等价于~</span></span><br><span class="line"><span class="comment">// flip(k) 把第k位取反</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;STL&quot;&gt;&lt;a href=&quot;#STL&quot; class=&quot;headerlink&quot; title=&quot;STL&quot;&gt;&lt;/a&gt;STL&lt;/h2&gt;&lt;p&gt;STL（Standard Template Library）是C++标准库的一部分，提供了一组通用的数据结构和算法，以便开发者能高效地处理常见的编程任务&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>哈希表</title>
    <link href="http://example.com/2025/01/01/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>http://example.com/2025/01/01/%E5%93%88%E5%B8%8C%E8%A1%A8/</id>
    <published>2025-01-01T02:40:40.000Z</published>
    <updated>2025-01-03T05:14:49.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>哈希表（Hash Table）是一种基于 键值对 存储的数据结构，通过一个哈希函数（Hash Function）将键映射到表中的一个位置，从而实现高效的数据存储与查找。哈希表的核心思想是利用数组的下标快速定位数据。</p><span id="more"></span><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到一个大约是数组大小2~3倍的一个大质数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>, null = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在c++中对负数取模会得到负数，所以在这里进行如下操作</span></span><br><span class="line"><span class="type">int</span> t = (x % N + N) % N;</span><br><span class="line"><span class="comment">//如果该位置为空或者找到了对应元素，那么退出循环</span></span><br><span class="line"><span class="keyword">while</span>(h[t] != null &amp;&amp; h[t] != x) </span><br><span class="line">&#123;</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (t == N) t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">string op;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">&quot;I&quot;</span>) &#123;</span><br><span class="line"><span class="comment">//因为find函数返回下标，所以这个的意思就是把对应的合适位置赋值</span></span><br><span class="line"><span class="comment">//实现插入功能</span></span><br><span class="line">h[<span class="built_in">find</span>(x)] = x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (h[<span class="built_in">find</span>(x)] == null) cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100003</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line"><span class="comment">//e[idx]: 存储具体的值，e[i] 表示索引 i 处存储的元素</span></span><br><span class="line"><span class="comment">//ne[idx]: 存储下一个节点的索引，ne[i] 表示索引 i 节点的下一个节点</span></span><br><span class="line"><span class="comment">//代码中的每个 h[i] 都可以看作是一个链表的头节点</span></span><br><span class="line">e[idx] = x;</span><br><span class="line">ne[idx] = h[k];</span><br><span class="line">h[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (e[i] == x) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将槽先清空 空指针一般用 -1 来表示</span></span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">string op;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">&quot;I&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">insert</span>(x);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(x)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, P = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">string str;</span><br><span class="line">ULL h[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; str;</span><br><span class="line">str = <span class="string">&quot; &quot;</span> + str;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//初始化p数组</span></span><br><span class="line">p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line"><span class="comment">//前缀和求整个字符串的哈希值</span></span><br><span class="line">        <span class="comment">//这里可以看作提取整数的每一位并构造出逆序数的方法</span></span><br><span class="line">h[i] = h[i - <span class="number">1</span>] * P + str[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;                                         </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h2&gt;&lt;p&gt;哈希表（Hash Table）是一种基于 键值对 存储的数据结构，通过一个哈希函数（Hash Function）将键映射到表中的一个位置，从而实现高效的数据存储与查找。哈希表的核心思想是利用数组的下标快速定位数据。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="哈希表" scheme="http://example.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="http://example.com/2025/01/01/%E5%A0%86/"/>
    <id>http://example.com/2025/01/01/%E5%A0%86/</id>
    <published>2025-01-01T01:09:08.000Z</published>
    <updated>2025-01-03T05:16:17.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是一种有效的完全二叉树结构，常用于实现优先队列。最大堆和最小堆分别保证根节点为最大或最小元素，常用于排序、图算法和合并有序数据等问题</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆是完全二叉树</span></span><br><span class="line"><span class="comment">//插入一个数(在最后插入一个数，并把这个数往上移)</span></span><br><span class="line"><span class="comment">//heap[++size] = x; up(size);</span></span><br><span class="line"><span class="comment">//求集合中的最小值</span></span><br><span class="line"><span class="comment">//heap[1]</span></span><br><span class="line"><span class="comment">//删除最小值(把最小的数用最后一位数覆盖掉，并把这个数往下移)</span></span><br><span class="line"><span class="comment">//heap[1] = heap[size]; size--; down(1);</span></span><br><span class="line"><span class="comment">//删除任意一个元素(down和up只会执行一个，所以可以都写)</span></span><br><span class="line"><span class="comment">//heap[k] = heap[size]; size--; down(k); up(k)</span></span><br><span class="line"><span class="comment">//修改任意一个元素</span></span><br><span class="line"><span class="comment">//heap[k] = x; down(k); up(k);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x的儿子为2 * x和2 * x + 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="comment">//为了避免关键字重复，把size改为cnt</span></span><br><span class="line"><span class="type">int</span> h[N], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//t代表当前节点</span></span><br><span class="line"><span class="type">int</span> t = u;</span><br><span class="line"><span class="comment">//左儿子</span></span><br><span class="line"><span class="keyword">if</span> (u * <span class="number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = <span class="number">2</span> * u;</span><br><span class="line"><span class="comment">//右儿子</span></span><br><span class="line"><span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (u != t) &#123;</span><br><span class="line"><span class="built_in">swap</span>(h[u], h[t]);</span><br><span class="line"><span class="built_in">down</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; h[i];</span><br><span class="line">cnt = n;</span><br><span class="line"><span class="comment">//从第一个非叶节点开始，从右到左，从下到上处理每个节点(即初始化堆)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--) <span class="built_in">down</span>(i);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; h[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">h[<span class="number">1</span>] = h[cnt--];</span><br><span class="line"><span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h2&gt;&lt;p&gt;堆是一种有效的完全二叉树结构，常用于实现优先队列。最大堆和最小堆分别保证根节点为最大或最小元素，常用于排序、图算法和合并有序数据等问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="堆" scheme="http://example.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://example.com/2024/12/31/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://example.com/2024/12/31/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2024-12-31T01:09:14.000Z</published>
    <updated>2025-01-03T01:24:28.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>1.将两个集合合并<br>2.询问两个元素是否在一个集合当中</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回x的根节点 + 路径压缩</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//p[x] != x</span></span><br><span class="line"><span class="comment">//因为每个集合只有根节点的值等于自己</span></span><br><span class="line"><span class="comment">//p[x] = find(p[x])</span></span><br><span class="line"><span class="comment">//直到找到它的根节点，之后会返回根节点的值</span></span><br><span class="line"><span class="comment">//同时在此过程中，每个节点父节点的值都会变成根节点的值</span></span><br><span class="line"><span class="comment">//由此完成路径压缩</span></span><br><span class="line"><span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">string op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">&quot;M&quot;</span>) &#123;</span><br><span class="line"><span class="comment">//将b所在集合的根节点视为a所在集合的根节点的父节点</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h2&gt;&lt;p&gt;1.将两个集合合并&lt;br&gt;2.询问两个元素是否在一个集合当中&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="集合" scheme="http://example.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Tire树</title>
    <link href="http://example.com/2024/12/29/Tire%E6%A0%91/"/>
    <id>http://example.com/2024/12/29/Tire%E6%A0%91/</id>
    <published>2024-12-29T02:41:42.000Z</published>
    <updated>2025-01-01T02:42:46.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tire树"><a href="#Tire树" class="headerlink" title="Tire树"></a>Tire树</h2><p>用来快速存储和查找字符串集合的数据结构</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//idx，当前用到了哪个下标</span></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//判断是否为新节点</span></span><br><span class="line"><span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx;</span><br><span class="line"><span class="comment">//p表示节点创建的先后序号</span></span><br><span class="line">        <span class="comment">//而u就代表这个节点的子节点</span></span><br><span class="line">p = son[p][u];</span><br><span class="line">&#125;</span><br><span class="line">cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p = son[p][u];</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">string op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line">string str;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">&quot;I&quot;</span>) &#123;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line"><span class="built_in">insert</span>(str);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(str) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Tire树&quot;&gt;&lt;a href=&quot;#Tire树&quot; class=&quot;headerlink&quot; title=&quot;Tire树&quot;&gt;&lt;/a&gt;Tire树&lt;/h2&gt;&lt;p&gt;用来快速存储和查找字符串集合的数据结构&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="树" scheme="http://example.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数学知识</title>
    <link href="http://example.com/2024/12/27/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2024/12/27/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/</id>
    <published>2024-12-26T23:31:04.000Z</published>
    <updated>2024-12-27T08:36:10.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><h3 id="试除法判定质数"><a href="#试除法判定质数" class="headerlink" title="试除法判定质数"></a>试除法判定质数</h3><p>质数（Prime Number）是指大于1的自然数中，除了1和它本身以外，不能被其他正整数整除的数。换句话说，质数只有两个正因数：1和它本身。例如，2、3、5、7、11等都是质数。</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有 d | n</span></span><br><span class="line"><span class="comment">//显然（n / d) | d 也成立</span></span><br><span class="line"><span class="comment">//所以所有枚举的数只需要满足d &lt;= n / d 就可以了</span></span><br><span class="line"><span class="comment">//不推荐使用d &lt;= sqrt(n)，因为每次执行的时候都会调用一次sqrt函数</span></span><br><span class="line"><span class="comment">//也不推荐使用d * d &lt;= n，因为当n接近于INT_MAX时存在溢出风险</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//n中最多只包含一个大于sqrt(n)的质因子</span></span><br><span class="line"><span class="comment">//使用反证法，如果包含两个a, b那么存在a * b &gt; n这与已知矛盾</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N / i; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">n /= i;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//如果被筛选过了，那么就跳过此次循环</span></span><br><span class="line"><span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//记录素数</span></span><br><span class="line">primes[cnt++] = i;</span><br><span class="line"><span class="comment">//筛选倍数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + i;  j &lt;= n; j += i) &#123;</span><br><span class="line">st[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性筛法"><a href="#线性筛法" class="headerlink" title="线性筛法"></a>线性筛法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//这种方法的实质就是就是筛选每个数的最小质因子</span></span><br><span class="line"><span class="comment">//所以每个和数都会被筛选到，并且只会被筛选一次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//如果这里还没被筛选，那么这里的数就是质数</span></span><br><span class="line"><span class="keyword">if</span> (!st[i]) primes[cnt++] = i;</span><br><span class="line"><span class="comment">//这里的写法可以看作primes[j] * i &lt;= n</span></span><br><span class="line"><span class="comment">//也就是在i确定的时候可以选取哪几个素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j++) &#123;</span><br><span class="line">st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//遍历到最小质因数的时候退出循环</span></span><br><span class="line"><span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h2><h3 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n / i; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (i != n / i) ans.<span class="built_in">push_back</span>(n / i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a>约数个数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由算术基本定理</span></span><br><span class="line"><span class="comment">//N = P1 ^ a1 + P2 ^ a2 + ··· + Pk ^ ak;</span></span><br><span class="line"><span class="comment">//对于每一个数，都有(ai + 1)次选法，因为最多可以选ai个这个数，最少什么都不选</span></span><br><span class="line"><span class="comment">//所以约数的个数就是(a1 + 1)(a2 + 1)···(ak + 1) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="约数之和"><a href="#约数之和" class="headerlink" title="约数之和"></a>约数之和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(P1 ^ 0 + P1 ^ 1 + ··· + P1 ^ a1) ··· （Pk ^ 0 + Pk ^ 1 + ··· + Pk ^ ak)</span></span><br><span class="line"><span class="comment">//用乘法分配律展开式子后结果是显然的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;质数&quot;&gt;&lt;a href=&quot;#质数&quot; class=&quot;headerlink&quot; title=&quot;质数&quot;&gt;&lt;/a&gt;质数&lt;/h2&gt;&lt;h3 id=&quot;试除法判定质数&quot;&gt;&lt;a href=&quot;#试除法判定质数&quot; class=&quot;headerlink&quot; title=&quot;试除法判定质数&quot;&gt;&lt;/a&gt;试除法判定质数&lt;/h3&gt;&lt;p&gt;质数（Prime Number）是指大于1的自然数中，除了1和它本身以外，不能被其他正整数整除的数。换句话说，质数只有两个正因数：1和它本身。例如，2、3、5、7、11等都是质数。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>KMP</title>
    <link href="http://example.com/2024/12/25/KMP/"/>
    <id>http://example.com/2024/12/25/KMP/</id>
    <published>2024-12-25T05:02:28.000Z</published>
    <updated>2024-12-27T07:24:22.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>KMP（Knuth-Morris-Pratt）算法是一种经典的字符串匹配算法，由 Donald Knuth、James H. Morris 和 Vaughan Pratt 于1977年提出。它在主串和模式串匹配过程中，通过预处理模式串来减少重复匹配的工作，从而显著提高效率</p><span id="more"></span><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">KMP</span><span class="params">(string s1, string s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//s1中比对的位置是x</span></span><br><span class="line"><span class="comment">//s2中比对的位置是y</span></span><br><span class="line"><span class="type">int</span> n = s<span class="number">1.</span><span class="built_in">size</span>(), m = s<span class="number">2.</span><span class="built_in">size</span>(), x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ne</span><span class="params">(m)</span></span>;</span><br><span class="line">ne[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//i表示当前要求的next的位置</span></span><br><span class="line"><span class="comment">//cn表示当前要和前一个字符比对的下标</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">2</span>, cn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line"><span class="keyword">if</span> (s2[i - <span class="number">1</span>] == s2[cn]) &#123;</span><br><span class="line">ne[i++] = ++cn;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cn = ne[cn];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ne[i++] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (x &lt; n &amp;&amp; y &lt; m) &#123;</span><br><span class="line"><span class="comment">//如果相等那么一起++去下一个位置</span></span><br><span class="line"><span class="keyword">if</span> (s1[x] == s2[y]) &#123;</span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line"><span class="comment">//无法往前跳，那么x++到s1的下一个比对位置</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">x++;</span><br><span class="line"><span class="comment">//还能往前跳</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">y = ne[y];</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> y == m ? x - y : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//next数组</span></span><br><span class="line">   <span class="comment">//不含当前，前面字符串前后缀最大匹配长度（不能整体）</span></span><br><span class="line">   <span class="comment">// a  a  b  a  a  b  s  a  a  b  a  a  a  x(终止位置 )</span></span><br><span class="line">   <span class="comment">// 0  1  2  3  4  5  6  7  8  9  10 11 12 13</span></span><br><span class="line"><span class="comment">//-1  0  1  0  1  2  3  0  1  2  3  4  5  2</span></span><br><span class="line"><span class="comment">//next数组有两个含义，一个是基础定义</span></span><br><span class="line"><span class="comment">//另一个代表着这个前缀的再下一个字符所在位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//S2(较小的那个字符串)</span></span><br><span class="line"><span class="comment">// a  a  b  a  a  b  c  a  a  b  a  a  b  t  ...</span></span><br><span class="line"><span class="comment">// 0  1  2  3  4  5  6  7  8  9  10 11 12 13</span></span><br><span class="line"><span class="comment">//next数组</span></span><br><span class="line"><span class="comment">//-1  0  1  0  1  2  3  0  1  2  3  4  5  6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//S1(较大的那个字符串)</span></span><br><span class="line"><span class="comment">// a  a  b  a  a  b  c  a  a  b  a  a  b  a  ...</span></span><br><span class="line"><span class="comment">// 0  1  2  3  4  5  6  7  8  9  10 11 12 13</span></span><br><span class="line"><span class="comment">//S2(较小的那个字符串)</span></span><br><span class="line"><span class="comment">// a  a  b  a  a  b  c  a  a  b  a  a  b  t  ...</span></span><br><span class="line"><span class="comment">// 0  1  2  3  4  5  6  7  8  9  10 11 12 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们让S2与S1一一比对，在13位置的时候不同，说明S2以0开头不能与S1匹配</span></span><br><span class="line"><span class="comment">//如果使用暴力做法，我们会把S2向右移动1个位置，然后与S1一一比对</span></span><br><span class="line"><span class="comment">//这种方法的时间复杂度是O(n * m)，我们实际上可以用next数组优化S2比对的位置</span></span><br><span class="line"><span class="comment">//将时间复杂度优化到O(n + m)</span></span><br><span class="line"><span class="comment">//此处先给出结论，我们只需要从S1和S2在比对到不同时的位置所对应的next数组开始比对就可以了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///S1(较大的那个字符串)</span></span><br><span class="line"><span class="comment">// a  a  b  a  a  b  c（a  a  b  a  a  b) a  ...</span></span><br><span class="line"><span class="comment">// 0  1  2  3  4  5  6  7  8  9  10 11 12 13</span></span><br><span class="line"><span class="comment">//S2(较小的那个字符串)</span></span><br><span class="line"><span class="comment">//(a  a  b  a  a  b) c (a  a  b  a  a  b) t  ...</span></span><br><span class="line"><span class="comment">// 0  1  2  3  4  5  6  7  8  9  10 11 12 13</span></span><br><span class="line"><span class="comment">//S2(较小的那个字符串)</span></span><br><span class="line">    <span class="comment">//(a  a  b  a  a  b) c  ...</span></span><br><span class="line"> <span class="comment">// 0  1  2  3  4  5  6</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// a  a  b  a  ...</span></span><br><span class="line">   <span class="comment">// 0  1  2  3  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以证明，有了next数组那么就可以说明以1 2 3 4 5 6开头必然无法匹配到S2</span></span><br><span class="line"><span class="comment">//同时由于next数组的定义，7 8 9 10 11 12位置已经一一匹配成功，所以接下来只需要看13位置</span></span><br><span class="line"><span class="comment">//具体来说就是因为next数组还可以代表前缀的再下一个字符所在位置</span></span><br><span class="line"><span class="comment">//也就是说这个位置之前的就是前缀</span></span><br><span class="line"><span class="comment">//用数学方法来证明就是我们可以可以把上面带括号的字符串分别设为A, B, C, D</span></span><br><span class="line"><span class="comment">//我们有 D = B = C 且 A = C 那么可以推出 A = D</span></span><br><span class="line"><span class="comment">//这样就证明了为什么7 8 9 10 11 12的位置是相等的</span></span><br><span class="line"><span class="comment">//接下来用反证法证明1 2 3 4 5 6位置不可以</span></span><br><span class="line"><span class="comment">//依据设A, B, C, D的方法来设A&#x27;, B&#x27;, C&#x27;, D&#x27;</span></span><br><span class="line"><span class="comment">//假设这样的位置可以匹配，那么A&#x27; = D&#x27;</span></span><br><span class="line"><span class="comment">//由已知条件A&#x27; = C&#x27;， B&#x27; = D&#x27;</span></span><br><span class="line"><span class="comment">//那么推出B&#x27; = C&#x27;</span></span><br><span class="line"><span class="comment">//根据题设B&#x27; &gt; B， 这与next数组矛盾，故假设不成立</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//类似的理解方法，我们可以求出next数组</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;KMP&quot;&gt;&lt;a href=&quot;#KMP&quot; class=&quot;headerlink&quot; title=&quot;KMP&quot;&gt;&lt;/a&gt;KMP&lt;/h2&gt;&lt;p&gt;KMP（Knuth-Morris-Pratt）算法是一种经典的字符串匹配算法，由 Donald Knuth、James H. Morris 和 Vaughan Pratt 于1977年提出。它在主串和模式串匹配过程中，通过预处理模式串来减少重复匹配的工作，从而显著提高效率&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="KMP" scheme="http://example.com/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://example.com/2024/12/20/%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2024/12/20/%E9%98%9F%E5%88%97/</id>
    <published>2024-12-20T04:10:08.000Z</published>
    <updated>2024-12-26T09:12:03.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列（Queue） 是一种常见的线性数据结构，具有先进先出（FIFO, First In First Out）的特点。它类似于现实生活中的排队场景：最先加入队列的元素最先被处理。</p><span id="more"></span><h3 id="用数组模拟队列"><a href="#用数组模拟队列" class="headerlink" title="用数组模拟队列"></a>用数组模拟队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">hh++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tt &gt;= hh) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; q[hh] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> M;</span><br><span class="line">cin &gt;&gt; M;</span><br><span class="line"><span class="keyword">while</span> (M--) &#123;</span><br><span class="line">string op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">&quot;push&quot;</span>) &#123;</span><br><span class="line"><span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">push</span>(x);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;pop&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">pop</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;empty&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">empty</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">query</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><a href="https://www.acwing.com/problem/content/156/">https://www.acwing.com/problem/content/156/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//此处使用双端队列</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="comment">//队尾插入，队头获取</span></span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//找到窗口最小值</span></span><br><span class="line"><span class="comment">//此处队列模拟的是下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//因为窗口中最多只能容纳k个元素</span></span><br><span class="line"><span class="comment">//i - k + 1所对应的就是窗口最左边的下标（合法的）</span></span><br><span class="line"><span class="comment">//如果队头比合法的最左边下标还要小，那么就说明元素多了</span></span><br><span class="line"><span class="comment">//通过h++，移除队头元素</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line"><span class="comment">//此处循环的作用就是把当前元素的前面所有元素进行一一对比</span></span><br><span class="line"><span class="comment">//如果前面的元素比较大，那么就把这个元素移除</span></span><br><span class="line"><span class="comment">//这里通过tt--，是从队尾进行元素移除</span></span><br><span class="line"><span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[i] &lt;= a[q[tt]]) tt--;</span><br><span class="line">q[++tt] = i;</span><br><span class="line"><span class="comment">//窗口最左边的下标要&gt;=0的时候才会输出值</span></span><br><span class="line"><span class="keyword">if</span> (i - k + <span class="number">1</span> &gt;= <span class="number">0</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//找到窗口的最大值</span></span><br><span class="line">hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line"><span class="comment">//找到比当前元素小的就删除</span></span><br><span class="line"><span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[i] &gt;= a[q[tt]]) tt--;</span><br><span class="line">q[++tt] = i;</span><br><span class="line"><span class="keyword">if</span> (i - k + <span class="number">1</span> &gt;= <span class="number">0</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;p&gt;队列（Queue） 是一种常见的线性数据结构，具有先进先出（FIFO, First In First Out）的特点。它类似于现实生活中的排队场景：最先加入队列的元素最先被处理。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="队列" scheme="http://example.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://example.com/2024/12/20/%E6%A0%88/"/>
    <id>http://example.com/2024/12/20/%E6%A0%88/</id>
    <published>2024-12-20T04:09:45.000Z</published>
    <updated>2024-12-20T05:57:23.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈（Stack） 是一种常见的线性数据结构，具有后进先出（LIFO, Last In First Out）的特点。栈就像生活中的书堆或碟子堆，只能在一端进行操作：新元素从顶端加入，移除时也只能从顶端取出。</p><span id="more"></span><h3 id="用数组模拟栈"><a href="#用数组模拟栈" class="headerlink" title="用数组模拟栈"></a>用数组模拟栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> stk[N], tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stk[++tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tt == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; stk[tt] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> M;</span><br><span class="line">cin &gt;&gt; M;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (M--) &#123;</span><br><span class="line">string op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">&quot;push&quot;</span>) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">push</span>(x);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;pop&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">pop</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;empty&quot;</span>) &#123;</span><br><span class="line"><span class="built_in">empty</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">query</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p><a href="https://www.acwing.com/problem/content/832/">https://www.acwing.com/problem/content/832/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">cin &gt;&gt; N;</span><br><span class="line"><span class="keyword">while</span> (N--) &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">        <span class="comment">//如果栈顶元素大于等于当前待入栈元素，则出栈</span></span><br><span class="line"><span class="keyword">while</span> (tt &gt; <span class="number">0</span> &amp;&amp; stk[tt] &gt;= x) tt--; </span><br><span class="line">        <span class="comment">//如果栈空，则没有比该元素小的值</span></span><br><span class="line"><span class="keyword">if</span> (tt == <span class="number">0</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;   </span><br><span class="line">        <span class="comment">//栈顶元素就是左侧第一个比它小的元素   </span></span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; stk[tt] &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">        <span class="comment">//入栈   </span></span><br><span class="line">stk[++tt] = x;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;p&gt;栈（Stack） 是一种常见的线性数据结构，具有后进先出（LIFO, Last In First Out）的特点。栈就像生活中的书堆或碟子堆，只能在一端进行操作：新元素从顶端加入，移除时也只能从顶端取出。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>双指针</title>
    <link href="http://example.com/2024/12/10/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    <id>http://example.com/2024/12/10/%E5%8F%8C%E6%8C%87%E9%92%88/</id>
    <published>2024-12-10T00:14:09.000Z</published>
    <updated>2024-12-25T13:18:20.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><span id="more"></span><h3 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h3><p><a href="https://www.acwing.com/problem/content/801/">https://www.acwing.com/problem/content/801/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> a[N], count[N];</span><br><span class="line"><span class="type">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//最长连续不重复子序列    </span></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//输入n个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="comment">//count[a[j]] 就是第j个元素出现的次数</span></span><br><span class="line">        count[a[j]]++;</span><br><span class="line">        <span class="comment">// i 向 j 靠近，直到找到和 j 重复的那个数退出循环</span></span><br><span class="line">        <span class="comment">//靠近的过程中，相当于舍弃了之前的那些的数字</span></span><br><span class="line">        <span class="comment">//所以把这些数字出现的次数 -1</span></span><br><span class="line">        <span class="keyword">while</span> (count[a[j]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            count[a[i]]--;  </span><br><span class="line">            i++;        </span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, j - i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;双指针&quot;&gt;&lt;a href=&quot;#双指针&quot; class=&quot;headerlink&quot; title=&quot;双指针&quot;&gt;&lt;/a&gt;双指针&lt;/h2&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://example.com/2024/12/08/%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2024/12/08/%E9%93%BE%E8%A1%A8/</id>
    <published>2024-12-07T16:07:15.000Z</published>
    <updated>2024-12-20T04:14:50.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种线性数据结构，由一组节点（Node）组成，每个节点通过指针链接到下一个节点。链表可以动态分配内存，适合频繁插入和删除操作的场景。</p><span id="more"></span><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//head表示头节点的下标</span></span><br><span class="line"><span class="comment">//e[i]表示节点i的值</span></span><br><span class="line"><span class="comment">//ne[i]表示节点i的下一个点的位置</span></span><br><span class="line"><span class="comment">//idx存储当前已经用到了哪个点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">head = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将x插入头节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = x;</span><br><span class="line">ne[idx] = head;</span><br><span class="line">head = idx;</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到下标是k的点后面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = x;</span><br><span class="line">ne[idx] = ne[k];</span><br><span class="line">ne[k] = idx;</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将下标是k的点后面的点移除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> [N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">idx = <span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//在下标是k的右边插入一个点x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = x;</span><br><span class="line">r[idx] = r[k];</span><br><span class="line">l[idx] = k;</span><br><span class="line">l[r[k]] = idx;</span><br><span class="line">r[k] = idx;</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在下标是k的左边插入一个点x</span></span><br><span class="line"><span class="comment">//add(l[k], x);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将下标是k的点移除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">r[l[k]] = r[k];</span><br><span class="line">l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;p&gt;链表是一种线性数据结构，由一组节点（Node）组成，每个节点通过指针链接到下一个节点。链表可以动态分配内存，适合频繁插入和删除操作的场景。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>二进制与位运算</title>
    <link href="http://example.com/2024/12/06/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://example.com/2024/12/06/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2024-12-06T07:06:08.000Z</published>
    <updated>2025-01-05T01:53:05.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二进制与位运算"><a href="#二进制与位运算" class="headerlink" title="二进制与位运算"></a>二进制与位运算</h2><p>二进制和位运算是计算机科学和编程中非常重要的概念，广泛应用于底层编程、硬件控制、数据加密、图像处理等领域。理解二进制与位运算是掌握计算机系统内部工作原理的基础。</p><span id="more"></span><h3 id="二进制基础"><a href="#二进制基础" class="headerlink" title="二进制基础"></a>二进制基础</h3><p>二进制是计算机使用的基础数字系统，它只使用两种数字：0 和 1。每一位数字称为“二进制位”或者“bit”。在二进制中，每一位的值是由其位置决定的。常见的二进制位数包括：</p><p>1位：0 或 1。<br>8位（字节）：一个字节（Byte），表示范围为 0 到 255。<br>32位、64位：用于表示更大的整数。</p><p><strong>四位二进制数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无符号</span></span><br><span class="line"><span class="type">int</span> min == <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max == <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> → <span class="number">0</span></span><br><span class="line"><span class="number">0001</span> → <span class="number">1</span></span><br><span class="line"><span class="number">0010</span> → <span class="number">2</span></span><br><span class="line"><span class="number">0011</span> → <span class="number">3</span></span><br><span class="line"><span class="number">0100</span> → <span class="number">4</span></span><br><span class="line"><span class="number">0101</span> → <span class="number">5</span></span><br><span class="line"><span class="number">0110</span> → <span class="number">6</span></span><br><span class="line"><span class="number">0111</span> → <span class="number">7</span></span><br><span class="line"><span class="number">1000</span> → <span class="number">8</span></span><br><span class="line"><span class="number">1001</span> → <span class="number">9</span></span><br><span class="line"><span class="number">1010</span> → <span class="number">10</span></span><br><span class="line"><span class="number">1011</span> → <span class="number">11</span></span><br><span class="line"><span class="number">1100</span> → <span class="number">12</span></span><br><span class="line"><span class="number">1101</span> → <span class="number">13</span></span><br><span class="line"><span class="number">1110</span> → <span class="number">14</span></span><br><span class="line"><span class="number">1111</span> → <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有符号</span></span><br><span class="line"><span class="type">int</span> min == <span class="number">-8</span>;</span><br><span class="line"><span class="type">int</span> max == <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> → <span class="number">0</span></span><br><span class="line"><span class="number">0001</span> → <span class="number">1</span></span><br><span class="line"><span class="number">0010</span> → <span class="number">2</span></span><br><span class="line"><span class="number">0011</span> → <span class="number">3</span></span><br><span class="line"><span class="number">0100</span> → <span class="number">4</span></span><br><span class="line"><span class="number">0101</span> → <span class="number">5</span></span><br><span class="line"><span class="number">0110</span> → <span class="number">6</span></span><br><span class="line"><span class="number">0111</span> → <span class="number">7</span></span><br><span class="line"><span class="comment">//正数 -&gt; 取反加一 -&gt; 负数 -&gt; 取反加一 -&gt;正数</span></span><br><span class="line"><span class="number">1000</span> → <span class="number">-8</span></span><br><span class="line"><span class="comment">//最小的负数不支持这个操作</span></span><br><span class="line"><span class="number">1001</span> → <span class="number">-7</span></span><br><span class="line"><span class="number">1010</span> → <span class="number">-6</span></span><br><span class="line"><span class="number">1011</span> → <span class="number">-5</span></span><br><span class="line"><span class="number">1100</span> → <span class="number">-4</span></span><br><span class="line"><span class="number">1101</span> → <span class="number">-3</span></span><br><span class="line"><span class="number">1110</span> → <span class="number">-2</span></span><br><span class="line"><span class="number">1111</span> → <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>N位二进制数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无符号表示的范围</span></span><br><span class="line"><span class="number">0</span> ~ (<span class="number">2</span>^N - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//有符号表示的范围</span></span><br><span class="line"><span class="number">-2</span>^(N<span class="number">-1</span>) ~ <span class="number">2</span>^(N<span class="number">-1</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有符号 int 的范围：</span></span><br><span class="line"><span class="type">int</span> s_int_min = <span class="number">-2147483648</span>;  <span class="comment">// -2^31</span></span><br><span class="line"><span class="type">int</span> s_int_max = <span class="number">2147483647</span>;   <span class="comment">// 2^31 - 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有符号 long long 的范围：</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> s_long_long_min = <span class="number">-9223372036854775808</span>;  <span class="comment">// -2^63</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> s_long_long_max = <span class="number">9223372036854775807</span>;   <span class="comment">// 2^63 - 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="位运算基础"><a href="#位运算基础" class="headerlink" title="位运算基础"></a>位运算基础</h3><p>位运算（Bitwise operations）是对整数在 二进制位（bit）上的操作。在计算机中，数据是以二进制的形式存储的，位运算直接对这些二进制数据进行操作，效率非常高。位运算的常见操作包括 与、或、异或、取反、左移、右移等</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;  <span class="comment">// 二进制表示： 0101</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">3</span>;  <span class="comment">// 二进制表示： 0011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与运算（AND）</span></span><br><span class="line"><span class="type">int</span> and_result = a &amp; b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a &amp; b = &quot;</span> &lt;&lt; and_result &lt;&lt; <span class="string">&quot; \t(二进制：&quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(and_result) &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或运算（OR）</span></span><br><span class="line"><span class="type">int</span> or_result = a | b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a | b = &quot;</span> &lt;&lt; or_result &lt;&lt; <span class="string">&quot; \t(二进制：&quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(or_result) &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异或运算（XOR）</span></span><br><span class="line"><span class="type">int</span> xor_result = a ^ b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a ^ b = &quot;</span> &lt;&lt; xor_result &lt;&lt; <span class="string">&quot; \t(二进制：&quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(xor_result) &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取反运算（NOT）</span></span><br><span class="line"><span class="type">int</span> not_result = ~a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~a = &quot;</span> &lt;&lt; not_result &lt;&lt; <span class="string">&quot; \t(二进制：&quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(not_result) &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左移运算</span></span><br><span class="line"><span class="type">int</span> left_shift = a &lt;&lt; <span class="number">1</span>;  <span class="comment">// 将a的二进制数左移1位</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a &lt;&lt; 1 = &quot;</span> &lt;&lt; left_shift &lt;&lt; <span class="string">&quot; \t(二进制：&quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(left_shift) &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右移运算</span></span><br><span class="line"><span class="type">int</span> right_shift = a &gt;&gt; <span class="number">1</span>;  <span class="comment">// 将a的二进制数右移1位</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a &gt;&gt; 1 = &quot;</span> &lt;&lt; right_shift &lt;&lt; <span class="string">&quot; \t(二进制：&quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(right_shift) &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非负数 &lt;&lt; 1, 等同于乘以2</span></span><br><span class="line"><span class="comment">//非负数 &lt;&lt; 2, 等同于乘以4</span></span><br><span class="line"><span class="comment">//非负数 &lt;&lt; 3, 等同于乘以8</span></span><br><span class="line"><span class="comment">//非负数 &lt;&lt; i, 等同于乘以2 ^ i</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//非负数 &gt;&gt; 1, 等同于除以2</span></span><br><span class="line"><span class="comment">//非负数 &gt;&gt; 2, 等同于除以4</span></span><br><span class="line"><span class="comment">//非负数 &gt;&gt; 3, 等同于除以8</span></span><br><span class="line"><span class="comment">//非负数 &gt;&gt; i, 等同于除以2 ^ i</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//只有非负数符合这个特征，负数不能用</span></span><br></pre></td></tr></table></figure><h3 id="二进制打印函数"><a href="#二进制打印函数" class="headerlink" title="二进制打印函数"></a>二进制打印函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printIntBinary</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">// 检查第 i 位是否为 1</span></span><br><span class="line">cout &lt;&lt; ((num &amp; (<span class="number">1</span> &lt;&lt; i)) ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printLongLongBinary</span><span class="params">(<span class="type">long</span> <span class="type">long</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="comment">// 使用1LL表示long long常量</span></span><br><span class="line">        cout &lt;&lt; ((num &amp; (<span class="number">1LL</span> &lt;&lt; i)) ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="y总的位运算小技巧"><a href="#y总的位运算小技巧" class="headerlink" title="y总的位运算小技巧"></a>y总的位运算小技巧</h3><h4 id="n的二进制表示中第k位"><a href="#n的二进制表示中第k位" class="headerlink" title="n的二进制表示中第k位"></a>n的二进制表示中第k位</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">k = <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">n = <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">n &gt;&gt; k &amp; <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1的个数"><a href="#1的个数" class="headerlink" title="1的个数"></a>1的个数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异或运算的性质"><a href="#异或运算的性质" class="headerlink" title="异或运算的性质"></a>异或运算的性质</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1) 异或运算是无进位相加</span></span><br><span class="line"><span class="comment">//(2) 异或运算满足交换律和结合律</span></span><br><span class="line"><span class="comment">//(3) 0 ^ n = n, n ^ n = 0</span></span><br><span class="line"><span class="comment">//(4) 整体异或和如果为x, 整体中某部分异或和如果为y, 那么剩下部分的异或和为x ^ y</span></span><br></pre></td></tr></table></figure><h4 id="交换两个数"><a href="#交换两个数" class="headerlink" title="交换两个数"></a>交换两个数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="comment">//不妨我们设a = A, b = B;</span></span><br><span class="line">a = a ^ b;  <span class="comment">//a = A ^ B;</span></span><br><span class="line">b = a ^ b;  <span class="comment">//b = (A ^ B) ^ B = A ^ (B ^ B) = A;</span></span><br><span class="line">a = a ^ b;  <span class="comment">//a = (A ^ B) ^ A = B ^ (A ^ A) = B;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="comment">//用这种方法交换两个位置的数一定要保证不在同一位置</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="比较两个数"><a href="#比较两个数" class="headerlink" title="比较两个数"></a>比较两个数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保证n是0或1</span></span><br><span class="line"><span class="comment">//这个函数可以时0变1，1变0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">filp</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n ^ <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个函数可以返回符号位</span></span><br><span class="line"><span class="comment">//1为负数</span></span><br><span class="line"><span class="comment">//0为非负数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (n &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="type">int</span> c = a - b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> returnA = <span class="built_in">filp</span>(<span class="built_in">sign</span>(c));</span><br><span class="line"><span class="type">int</span> returnB = <span class="built_in">sign</span>(c);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;returnA = &quot;</span> &lt;&lt; returnA &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;returnB = &quot;</span> &lt;&lt; returnB &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> ans = a * returnA + b * returnB;</span><br><span class="line">cout &lt;&lt;  <span class="string">&quot;max = &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找到缺失的数"><a href="#找到缺失的数" class="headerlink" title="找到缺失的数"></a>找到缺失的数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0 - n中缺了一个数</span></span><br><span class="line"><span class="comment">//找到缺的那个数是什么</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum2 = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">sum1 ^= arr[i];</span><br><span class="line">sum2 ^= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = sum1 ^ sum2;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找到出现了奇数次的数"><a href="#找到出现了奇数次的数" class="headerlink" title="找到出现了奇数次的数"></a>找到出现了奇数次的数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//数组中有一个数出现的次数为奇数，其他所有的数都出现了偶数次</span></span><br><span class="line"><span class="comment">//请找出那个出现了奇数次的那个数</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">ans ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找到两个出现的奇数次的数"><a href="#找到两个出现的奇数次的数" class="headerlink" title="找到两个出现的奇数次的数"></a>找到两个出现的奇数次的数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//数组中只有两种数出现了奇数次，其他数都出现了偶数次</span></span><br><span class="line"><span class="comment">//请求出这两个出现了奇数次的数</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> eor1 = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">eor1 ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//eor1的结果就是a ^ b</span></span><br><span class="line"><span class="comment">//提取出eor1二进制中最右侧的1</span></span><br><span class="line"><span class="type">int</span> rightOne = eor1 &amp; (-eor1);</span><br><span class="line"><span class="type">int</span> eor2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//如果数组中的数最右侧的1在相同位置</span></span><br><span class="line"><span class="comment">//那么就开始求eor2的异或和</span></span><br><span class="line"><span class="comment">//我们不妨设a在该位置为1，b在该位置为0</span></span><br><span class="line"><span class="comment">//那么所有最右侧的数为1的数就包括一堆出现了偶数次的数的数和一个1</span></span><br><span class="line"><span class="comment">//所以eor2 = a;</span></span><br><span class="line"><span class="comment">//那么eor1 ^ eor2 = b;</span></span><br><span class="line"><span class="comment">//同理如果a在该位置为0，b在该位置为1也成立</span></span><br><span class="line"><span class="keyword">if</span> ((arr[i] &amp; rightOne) == rightOne) &#123;</span><br><span class="line">eor2 ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (eor1 ^ eor2) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; eor2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找到唯一小于m的数"><a href="#找到唯一小于m的数" class="headerlink" title="找到唯一小于m的数"></a>找到唯一小于m的数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//数组中只有一种数出现的次数少于m次，其他的数都出现了m次</span></span><br><span class="line"><span class="comment">//请找出是哪个数出现的次数少于了m次</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">32</span>)</span></span>;</span><br><span class="line"><span class="comment">//cnt[0]：0位上有多少1</span></span><br><span class="line"><span class="comment">//cnt[1]：1位上有多少1</span></span><br><span class="line"><span class="comment">//cnt[2]：2位上有多少1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">cnt[j] += (arr[i] &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="comment">//其他数都出现的m次</span></span><br><span class="line"><span class="comment">//实际上就是就是这些数对应位置上的1也出现的m次</span></span><br><span class="line"><span class="comment">//所以这些位置上的数就可以被m整除</span></span><br><span class="line"><span class="comment">//但是如果加进来一个出现次数小于m的数</span></span><br><span class="line"><span class="comment">//那有些位上的数就不能被m整除</span></span><br><span class="line"><span class="comment">//而这些位就是这个数的1所在位置</span></span><br><span class="line"><span class="comment">//通过|的操作，实际上是把对应位置的1加进ans里</span></span><br><span class="line"><span class="keyword">if</span> (cnt[i] % m != <span class="number">0</span>) &#123;</span><br><span class="line">ans |= (<span class="number">1</span> &lt;&lt; i); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算的骚操作"><a href="#位运算的骚操作" class="headerlink" title="位运算的骚操作"></a>位运算的骚操作</h3><h4 id="判读一个数是不是2的幂"><a href="#判读一个数是不是2的幂" class="headerlink" title="判读一个数是不是2的幂"></a>判读一个数是不是2的幂</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; n == (n &amp; -n)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(n)) &#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&quot;是2的幂&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&quot;不是2的幂&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断一个数是不是3的幂"><a href="#判断一个数是不是3的幂" class="headerlink" title="判断一个数是不是3的幂"></a>判断一个数是不是3的幂</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ool <span class="title">check</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1162261467是int范围内最大的3的幂，它是3 ^ 19</span></span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(n)) &#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&quot;是3的幂&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&quot;不是3的幂&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二进制与位运算&quot;&gt;&lt;a href=&quot;#二进制与位运算&quot; class=&quot;headerlink&quot; title=&quot;二进制与位运算&quot;&gt;&lt;/a&gt;二进制与位运算&lt;/h2&gt;&lt;p&gt;二进制和位运算是计算机科学和编程中非常重要的概念，广泛应用于底层编程、硬件控制、数据加密、图像处理等领域。理解二进制与位运算是掌握计算机系统内部工作原理的基础。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二进制" scheme="http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    <category term="位运算" scheme="http://example.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>有趣的题解</title>
    <link href="http://example.com/2024/12/03/%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/12/03/%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A2%98%E8%A7%A3/</id>
    <published>2024-12-03T15:30:57.000Z</published>
    <updated>2025-01-04T07:07:46.654Z</updated>
    
    <content type="html"><![CDATA[<p>此合集收录了各种有趣的题解</p><span id="more"></span><h2 id="K-th-Not-Divisible-by-n"><a href="#K-th-Not-Divisible-by-n" class="headerlink" title="K-th Not Divisible by n"></a>K-th Not Divisible by n</h2><p><a href="https://codeforces.com/contest/1352/problem/C">https://codeforces.com/contest/1352/problem/C</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="comment">//打印第k个不能被n整除的正整数</span></span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="type">int</span> k, n;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="comment">//计算跳过的数字</span></span><br><span class="line"><span class="type">int</span> need = (k - <span class="number">1</span>) / (n - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; k + need &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Raising-Bacteria"><a href="#Raising-Bacteria" class="headerlink" title="Raising Bacteria"></a>Raising Bacteria</h2><p><a href="https://codeforces.com/problemset/problem/579/A">https://codeforces.com/problemset/problem/579/A</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> r = n % <span class="number">2</span>;</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">1</span>) count++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Same-Differences"><a href="#Same-Differences" class="headerlink" title="Same Differences"></a>Same Differences</h2><p><a href="https://codeforces.com/contest/1520/problem/D">https://codeforces.com/contest/1520/problem/D</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//计算aj - ai = j - i等价于ai - i = aj - j，构造新数组ai - i</span></span><br><span class="line"><span class="comment">//计算新数组有多少对满足i &lt; j且ai = aj</span></span><br><span class="line"><span class="comment">//实际上就是统计一个数在它之前的位置还出现过几次这个数</span></span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line"><span class="type">int</span> ans= <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">x -= i;</span><br><span class="line">ans += cnt[x];</span><br><span class="line">cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小循环节"><a href="#最小循环节" class="headerlink" title="最小循环节"></a>最小循环节</h2><p><a href="https://ac.nowcoder.com/acm/contest/97443/C">https://ac.nowcoder.com/acm/contest/97443/C</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">//因为可以任意插入字符，所以最小循环节就是所有不同的字符的数量</span></span><br><span class="line">string str;  </span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t : str)&#123;</span><br><span class="line">cnt[t]++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; cnt.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Move-Brackets"><a href="#Move-Brackets" class="headerlink" title="Move Brackets"></a>Move Brackets</h2><p><a href="https://codeforces.com/problemset/problem/1374/C">https://codeforces.com/problemset/problem/1374/C</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">string str;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> bal = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// &#x27;(&#x27; &gt; &#x27;)&#x27;的数量时总是没问题</span></span><br><span class="line"><span class="comment">//因为是(()还可以看下一个是什么符号，然后再做决定，但是())已经不成立了</span></span><br><span class="line"><span class="comment">//当&#x27;)&#x27;有多余的时候，我们便可以移动&#x27;(&#x27;到最前面去，此时前面部分刚好匹配正确，所以bal = 0</span></span><br><span class="line"><span class="comment">//不用考虑移动哪一个&#x27;(&#x27;，因为这个字符串左右括号的数量相同，移动后面任意一个都不会使得匹配的数量发生变化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>) bal++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">bal--;</span><br><span class="line"><span class="keyword">if</span> (bal &lt; <span class="number">0</span>) &#123;</span><br><span class="line">bal = <span class="number">0</span>;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Sorted-Adjacent-Differences"><a href="#Sorted-Adjacent-Differences" class="headerlink" title="Sorted Adjacent Differences"></a>Sorted Adjacent Differences</h2><p><a href="https://codeforces.com/problemset/problem/1339/B">https://codeforces.com/problemset/problem/1339/B</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> arr[n];</span><br><span class="line"><span class="type">int</span> ans[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(arr, arr + n);</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">l = n / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">r = n / <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = n / <span class="number">2</span>;</span><br><span class="line">r = n / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ans[k++] = arr[l--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &lt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">ans[k++] = arr[r++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k == n) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pspspsps"><a href="#pspspsps" class="headerlink" title="pspspsps"></a>pspspsps</h2><p><a href="https://codeforces.com/contest/2049/problem/B">https://codeforces.com/contest/2049/problem/B</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">string str;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line"><span class="comment">//首项为s和末项为p都对整体没有影响，直接赋值为.</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&#x27;s&#x27;</span>) str[<span class="number">0</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (str[n - <span class="number">1</span>] == <span class="string">&#x27;p&#x27;</span>) str[n - <span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="type">bool</span> found_p = <span class="literal">false</span>;</span><br><span class="line"><span class="type">bool</span> found_s = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;p&#x27;</span>) &#123;</span><br><span class="line">found_p = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">found_s = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (found_p &amp;&amp; found_s) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小红的排列构造"><a href="#小红的排列构造" class="headerlink" title="小红的排列构造"></a>小红的排列构造</h2><p><a href="https://ac.nowcoder.com/acm/contest/99277/C">https://ac.nowcoder.com/acm/contest/99277/C</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> arr[n + <span class="number">1</span>];</span><br><span class="line">string str;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line">str = <span class="string">&#x27; &#x27;</span> + str; </span><br><span class="line"><span class="keyword">if</span> (str[n] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//如果是1，那么就赋值为上次1的位置加1的数</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">arr[i] = flag;</span><br><span class="line">flag = i + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//如果是0，那么就赋值为当前位置加1的数</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; t;</span></span><br><span class="line"><span class="keyword">while</span> (t--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小红的01串（三）"><a href="#小红的01串（三）" class="headerlink" title="小红的01串（三）"></a>小红的01串（三）</h2><p><a href="https://ac.nowcoder.com/acm/contest/98256/C">https://ac.nowcoder.com/acm/contest/98256/C</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, k;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; k;</span><br><span class="line"><span class="type">int</span> max_k;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span> &amp;&amp; a != <span class="number">0</span> &amp;&amp; b != <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">max_k = <span class="number">2</span> * a - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">max_k = <span class="number">2</span> * <span class="built_in">min</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= max_k) &#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line"><span class="keyword">if</span> (k % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> r0 = a - ((k + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> r1 = b - ((k + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r0; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ((k + <span class="number">1</span>) / <span class="number">2</span>); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;01&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r1; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">k--;</span><br><span class="line"><span class="type">int</span> r0 = a - ((k + <span class="number">1</span>) / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> r1 = b - ((k + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r0; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ((k + <span class="number">1</span>) / <span class="number">2</span>); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;01&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r1; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (k % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> r0 = a - ((k + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> r1 = b - ((k + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r1; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ((k + <span class="number">1</span>) / <span class="number">2</span>); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;10&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r0; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">k--;</span><br><span class="line"><span class="type">int</span> r0 = a - ((k + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> r1 = b - ((k + <span class="number">1</span>) / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r1; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ((k + <span class="number">1</span>) / <span class="number">2</span>); i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;10&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r0; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预知"><a href="#预知" class="headerlink" title="预知"></a>预知</h2><p><a href="https://ac.nowcoder.com/acm/contest/99458/D">https://ac.nowcoder.com/acm/contest/99458/D</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> arr[n];</span><br><span class="line"><span class="type">int</span> cnt_1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line"><span class="keyword">if</span> (arr[i] == <span class="number">1</span>) cnt_1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(arr, arr + n);</span><br><span class="line"><span class="keyword">if</span> (cnt_1 == n) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//当次大值为1的时候，我们考虑最坏的情况。</span></span><br><span class="line"><span class="comment">//当知道了max - 1张牌（这里可以把这max - 1张牌都看成max的那种类型）后</span></span><br><span class="line"><span class="comment">//剩下的其实就可以转化为1, 1, 1, ···这种情况</span></span><br><span class="line"><span class="comment">//那我们不管翻开的是哪两张牌，那么都是不一样的</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[n - <span class="number">2</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">cout &lt;&lt; arr[n - <span class="number">1</span>] - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; arr[n - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> t  = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Petr-and-a-Combination-Lock"><a href="#Petr-and-a-Combination-Lock" class="headerlink" title="Petr and a Combination Lock"></a>Petr and a Combination Lock</h2><p><a href="https://codeforces.com/problemset/problem/1097/B">https://codeforces.com/problemset/problem/1097/B</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; arr[i];</span><br><span class="line"><span class="comment">//因为对于每个角度而言，要么顺时针旋转，要么逆时针旋转</span></span><br><span class="line"><span class="comment">//所以一共有2 ^ n种情况</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">1</span> &lt;&lt; n; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> mask = <span class="number">0</span>; mask &lt; sum; mask++) &#123;</span><br><span class="line"><span class="type">int</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//如果对应位上的数为1，那么就逆时针旋转，否则顺时针旋转</span></span><br><span class="line"><span class="keyword">if</span> (mask &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">angle -= arr[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">angle += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (angle % <span class="number">360</span> == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; t;</span></span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dora-and-Search"><a href="#Dora-and-Search" class="headerlink" title="Dora and Search"></a>Dora and Search</h2><p><a href="https://codeforces.com/problemset/problem/1793/C">https://codeforces.com/problemset/problem/1793/C</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> MIN = <span class="number">1</span>, MAX = n;</span><br><span class="line"><span class="comment">//我们移除所有端点值为最值的点</span></span><br><span class="line"><span class="comment">//因为这里是排列数，所以可以直接使用++--来动态更新最值</span></span><br><span class="line"><span class="comment">//从两端向中间逐渐移除的好处是：</span></span><br><span class="line"><span class="comment">//只要端点处的不是最值，那么最值一定就在中间位置，那就是符合条件的情况</span></span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;l = &quot; &lt;&lt; l &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;r = &quot; &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;MAX = &quot; &lt;&lt; MAX &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;MIN = &quot; &lt;&lt; MIN &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (a[l] == MIN) &#123;</span><br><span class="line">l++;</span><br><span class="line">MIN++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[l] == MAX) &#123;</span><br><span class="line">l++;</span><br><span class="line">MAX--;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[r] == MIN) &#123;</span><br><span class="line">r--;</span><br><span class="line">MIN++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[r] == MAX) &#123;</span><br><span class="line">r--;</span><br><span class="line">MAX--;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//因为l和r是数组下标从0开始的，所以这里要加1</span></span><br><span class="line"><span class="keyword">if</span> (l &lt;= r) &#123;</span><br><span class="line">cout &lt;&lt; l + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; r + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;此合集收录了各种有趣的题解&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="http://example.com/2024/12/02/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://example.com/2024/12/02/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2024-12-02T02:46:35.000Z</published>
    <updated>2024-12-02T03:47:02.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>滑动窗口（Sliding Window）是一种常用的算法技巧，通常用于解决涉及子数组或子序列的最优化问题。它的核心思想是利用两个指针（窗口的左右边界），通过动态调整窗口的大小来遍历数据结构，从而有效地解决问题。</p><span id="more"></span><h3 id="长度最小的子数组（leetcode-209）"><a href="#长度最小的子数组（leetcode-209）" class="headerlink" title="长度最小的子数组（leetcode.209）"></a>长度最小的子数组（leetcode.209）</h3><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/?envType=problem-list-v2&envId=sliding-window">https://leetcode.cn/problems/minimum-size-subarray-sum/description/?envType=problem-list-v2&amp;envId=sliding-window</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左指针 l, 右指针 r, 当前窗口的和 sum, 最终答案 ans 初始化为 INT_MAX</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, sum = <span class="number">0</span>, ans = INT_MAX;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; nums.<span class="built_in">size</span>(); r++) &#123;</span><br><span class="line">            sum += nums[r];  </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果当前窗口的和 sum 大于或等于 target，尝试缩小窗口</span></span><br><span class="line">            <span class="keyword">while</span> (sum - nums[l] &gt;= target) &#123;</span><br><span class="line">                sum -= nums[l++];  <span class="comment">// 左指针向右滑动，减少窗口和 sum</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果当前窗口的和 sum 大于或等于 target，更新答案</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);  <span class="comment">// 更新最小窗口长度</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有找到符合条件的子数组，返回 0，否则返回最小长度</span></span><br><span class="line">        <span class="keyword">return</span> ans == INT_MAX ? <span class="number">0</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="无重复字符的最长字串（leetcode-3）"><a href="#无重复字符的最长字串（leetcode-3）" class="headerlink" title="无重复字符的最长字串（leetcode.3）"></a>无重复字符的最长字串（leetcode.3）</h3><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/?envType=problem-list-v2&envId=sliding-window">https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/?envType=problem-list-v2&amp;envId=sliding-window</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;滑动窗口&quot;&gt;&lt;a href=&quot;#滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口&quot;&gt;&lt;/a&gt;滑动窗口&lt;/h2&gt;&lt;p&gt;滑动窗口（Sliding Window）是一种常用的算法技巧，通常用于解决涉及子数组或子序列的最优化问题。它的核心思想是利用两个指针（窗口的左右边界），通过动态调整窗口的大小来遍历数据结构，从而有效地解决问题。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>排序算法大合集</title>
    <link href="http://example.com/2024/11/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%A7%E5%90%88%E9%9B%86/"/>
    <id>http://example.com/2024/11/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%A7%E5%90%88%E9%9B%86/</id>
    <published>2024-11-30T02:43:45.000Z</published>
    <updated>2024-12-10T00:09:14.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>排序算法是指将一组元素按某种顺序排列的算法。通常，排序的目的是为了使得数据能够更加高效地查找、检索或处理。排序算法的应用非常广泛，几乎在所有需要数据排列的地方都能找到它的身影，比如：数据库查询、数据分析、图像处理、搜索引擎等</p><span id="more"></span><h3 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h3><p><strong>原理</strong><br>    通过不断交换相邻的元素，将较大的元素逐渐“冒泡”到数组的末端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(vector&lt;T&gt;&amp; arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(arr[j + <span class="number">1</span>], arr[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最坏时间复杂度：O(n²)</strong><br>    在逆序的情况下，外层和内层循环都会遍历数组，导致平方级别的时间开销<br><strong>最好时间复杂度：O(n)</strong><br>    如果数组已经是有序的，在这种情况下，算法只会进行一次遍历，比较次数为 n - 1 次，且不需要任何交换<br><strong>空间复杂度：O(1)</strong></p><p><strong>优点</strong><br>    1、简单<br>    2、稳定性</p><h3 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h3><p>原理：<br>    从未排序的部分中选择最小的元素，并将其与未排序部分的第一个元素交换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(vector&lt;T&gt;&amp; arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123; </span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i], arr[min]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度：O(n²)</strong><br><strong>空间复杂度：O(1)</strong></p><p><strong>优点</strong><br>    1、无</p><h3 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h3><p><strong>原理</strong><br>    将数组中的每个元素逐个插入到已排序部分的合适位置来实现排序。它的工作方式类似于打扑克牌时，我们将一张牌一张一张地插入到已经有序的牌堆中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(vector&lt;T&gt;&amp; arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> key = arr[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最坏时间复杂度：O(n²)</strong><br>    当数组逆序时，每次插入都需要比较和移动很多元素<br><strong>最好时间复杂度：O(n)</strong><br>    当数组已经有序时，只需要进行少量的比较<br><strong>空间复杂度：O(1)</strong></p><p><strong>优点</strong><br>    1、稳定性</p><h3 id="计数排序（Counting-Sort）"><a href="#计数排序（Counting-Sort）" class="headerlink" title="计数排序（Counting Sort）"></a>计数排序（Counting Sort）</h3><p>原理：<br>    通过计算数组中每个元素出现的次数（即”计数”）来确定元素的最终位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">countingSort</span><span class="params">(vector&lt;T&gt;&amp; arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 找到数组中最大和最小的元素</span></span><br><span class="line">    T maxElement = arr[<span class="number">0</span>], minElement = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; maxElement) maxElement = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; minElement) minElement = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算范围</span></span><br><span class="line">    <span class="type">int</span> range = maxElement - minElement + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建计数数组，初始化为0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(range, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充计数数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count[arr[i] - minElement]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新构建排序后的数组</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; range; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (count[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[index++] = i + minElement;</span><br><span class="line">            count[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度：O(n + k)</strong><br>    其中 n 是输入数组的大小，k 是输入数据的最大值和最小值之间的范围。对于数据范围较小的情况，计数排序可以非常高效。遍历输入数组和填充计数数组的时间复杂度是 O(n)，累加计数数组和重建排序数组的时间复杂度是 O(k)，因此总体时间复杂度为 O(n + k)<br><strong>空间复杂度：O(k)</strong><br>    需要额外的 count 数组来存储每个元素出现的次数，数组的大小为 k，即最大值和最小值之间的范围</p><p><strong>优点</strong><br>    1、高效<br>    2、稳定性<br>    3、线性时间复杂度<br><strong>缺点</strong><br>    1、空间消耗大<br>    2、适用范围有限</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line"><span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line"><span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">quick_sort</span>(q, l, j); <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> temp[r + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">merge_sort</span>(arr, l ,mid); <span class="built_in">merge_sort</span>(arr, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt;= arr[j]) temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">else</span> temp[k++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) temp[k++] = arr[i++];</span><br><span class="line"><span class="keyword">while</span>(j &lt;= r) temp[k++] = arr[j++];</span><br><span class="line"><span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) &#123;</span><br><span class="line">arr[i] = temp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;p&gt;排序算法是指将一组元素按某种顺序排列的算法。通常，排序的目的是为了使得数据能够更加高效地查找、检索或处理。排序算法的应用非常广泛，几乎在所有需要数据排列的地方都能找到它的身影，比如：数据库查询、数据分析、图像处理、搜索引擎等&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>前缀和与差分</title>
    <link href="http://example.com/2024/11/28/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"/>
    <id>http://example.com/2024/11/28/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</id>
    <published>2024-11-28T00:15:18.000Z</published>
    <updated>2024-11-30T06:22:50.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p>前缀和（Prefix Sum）是一个非常常见且高效的算法技巧，用来快速计算数组或矩阵中某个区间的元素和。它的核心思想是通过预处理数组（或矩阵），构建一个新的数组（或矩阵），使得可以在常数时间内计算任意区间的和，从而显著提高效率。</p><span id="more"></span><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e5</span> + <span class="number">9</span>;  </span><br><span class="line">ll arr[N] = &#123;<span class="number">0</span>&#125;;       </span><br><span class="line">ll prefix[N] = &#123;<span class="number">0</span>&#125;;     </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  </span><br><span class="line">    cin &gt;&gt; n;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入数组并计算前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];  </span><br><span class="line">        prefix[i] = prefix[i - <span class="number">1</span>] + arr[i];  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> m;  </span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理每个查询区间 [l, r]</span></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;  </span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        </span><br><span class="line">        cout &lt;&lt; prefix[r] - prefix[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>目的是预处理出一个结构，以后每次查询二维数组任何范围上的累加和都是O(1)的操作<br>1 根据原始状况，生成二维前缀和数组sum，<br>   sum[i][j]: 代表左上角(0,0)到右下角(i,j)这个范围的累加和<br>   sum[i][j] +&#x3D; sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1];<br>2 查询左上角(a,b)到右下角(c,d)这个范围的累加和<br>   sum[c][d] - sum[c][b-1] - sum[a-1][d] + sum[a-1][b-1];<br>3 实际过程中往往补第0行、第0列来减少很多条件判断。<br>  当然也可以不补。根据个人习惯决定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e3</span>;  <span class="comment">// 定义二维数组的最大尺寸</span></span><br><span class="line">ll arr[N][N] = &#123;<span class="number">0</span>&#125;;       <span class="comment">// 原始数组</span></span><br><span class="line">ll prefix[N][N] = &#123;<span class="number">0</span>&#125;;    <span class="comment">// 二维前缀和数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输入矩阵的大小</span></span><br><span class="line">    <span class="type">int</span> n; </span><br><span class="line">    cin &gt;&gt; n;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入子矩阵查询的坐标 (x1, y1) 到 (x2, y2)</span></span><br><span class="line">    <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入原始数组并计算二维前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; arr[i][j];</span><br><span class="line">            <span class="comment">// 计算二维前缀和</span></span><br><span class="line">            prefix[i][j] = prefix[i - <span class="number">1</span>][j] + prefix[i][j - <span class="number">1</span>] - prefix[i - <span class="number">1</span>][j - <span class="number">1</span>] + arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出原始数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原数组:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%4lld &quot;</span>, arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出二维前缀和</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二维前缀和:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%4lld &quot;</span>, prefix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出指定子矩阵的和，并附加查询的区间</span></span><br><span class="line">    ll submatrix_sum = prefix[x2][y2] - prefix[x1 - <span class="number">1</span>][y2] - prefix[x2][y1 - <span class="number">1</span>] + prefix[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查询区域: (&quot;</span> &lt;&lt; x1 &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y1 &lt;&lt; <span class="string">&quot;) 到 (&quot;</span> &lt;&lt; x2 &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y2 &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子矩阵的和: &quot;</span> &lt;&lt; submatrix_sum &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>差分（Difference）是一种常见的算法技巧，通常用于处理数组或区间更新问题。差分的基本思想是通过对数组的差分（即存储相邻元素的差值）来高效地进行区间修改或区间查询。</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll N = <span class="number">1e5</span> + <span class="number">9</span>;</span><br><span class="line">ll arr[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll diff[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll prefix[N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建差分数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        diff[i] = arr[i] - arr[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出初始差分数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;差分数组:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; diff[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区间操作：对 [l, r] 加 1</span></span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    diff[l] += <span class="number">1</span>;</span><br><span class="line">    diff[r + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过前缀和还原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        prefix[i] = prefix[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出还原后的数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;还原后的数组:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; prefix[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p>在二维数组中，如果经历如下的过程<br>1 批量的做如下的操作，每个操作都有独立的a、b、c、d、v<br>void add(a, b, c, d, v) : 左上角(a,b)到右下角(c,d)范围上，每个数字+v，怎么快速处理？<br>2 操作做完后，如何正确得到二维数组中每个位置的值？</p><p>这就是二维差分的主要工作，add时候快速处理，最后build得到每个位置的值，修改操作必须集中在一起，不能边修改边查询。<br>1）add方法实现，比较巧妙！<br>2）build方法实现，和处理前缀和类似<br>3）真实数据用一圈0包裹起来，可以减少很多边界讨论</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            diff[i][j] += diff[i - <span class="number">1</span>][j] + diff[i][j - <span class="number">1</span>] - diff[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    diff[a][b] += v;</span><br><span class="line">    diff[c + <span class="number">1</span>][b] -= v;</span><br><span class="line">    diff[a][d + <span class="number">1</span>] -= v;</span><br><span class="line">    diff[c + <span class="number">1</span>][d + <span class="number">1</span>] += v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">ll arr[<span class="number">1009</span>][<span class="number">1009</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll diff[<span class="number">1009</span>][<span class="number">1009</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll sum[<span class="number">1009</span>][<span class="number">1009</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; arr[i][j];</span><br><span class="line">            <span class="comment">//diff[i][j] 表示 (1, 1) 到 (i, j) 区域的差分</span></span><br><span class="line">            diff[i][j] =  arr[i][j] - arr[i - <span class="number">1</span>][j] - arr[i][j - <span class="number">1</span>] + arr[i - <span class="number">1</span>][j - <span class="number">1</span>]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, k;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; k;</span><br><span class="line">        diff[x1][y1] += k;</span><br><span class="line">        diff[x1][y2 + <span class="number">1</span>] -= k;</span><br><span class="line">        diff[x2 + <span class="number">1</span>][y1] -= k;</span><br><span class="line">        diff[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            sum[i][j] = sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] + diff[i][j];</span><br><span class="line">            cout &lt;&lt; sum[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前缀和&quot;&gt;&lt;a href=&quot;#前缀和&quot; class=&quot;headerlink&quot; title=&quot;前缀和&quot;&gt;&lt;/a&gt;前缀和&lt;/h2&gt;&lt;p&gt;前缀和（Prefix Sum）是一个非常常见且高效的算法技巧，用来快速计算数组或矩阵中某个区间的元素和。它的核心思想是通过预处理数组（或矩阵），构建一个新的数组（或矩阵），使得可以在常数时间内计算任意区间的和，从而显著提高效率。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="前缀和" scheme="http://example.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    <category term="差分" scheme="http://example.com/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>二分答案法</title>
    <link href="http://example.com/2024/11/25/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E6%B3%95/"/>
    <id>http://example.com/2024/11/25/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88%E6%B3%95/</id>
    <published>2024-11-25T00:35:18.000Z</published>
    <updated>2024-11-30T06:21:13.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分答案法"><a href="#二分答案法" class="headerlink" title="二分答案法"></a>二分答案法</h2><p>1、估计最终答案可能范围是什么<br>2、分析问题的答案和给定条件的单调性，大部分的时候只需要用到自然智慧<br>3、建立一个f函数，当答案固定的情况下，判断给定的条件是否达标<br>4、在最终答案可能的范围内不断二分搜索，每次用f函数判断，直到二分结束，找到最合适的答案</p><span id="more"></span><h3 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h3><h4 id="进击的奶牛"><a href="#进击的奶牛" class="headerlink" title="进击的奶牛"></a>进击的奶牛</h4><p><a href="https://www.luogu.com.cn/problem/P1824">https://www.luogu.com.cn/problem/P1824</a></p><h5 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//隔间位置 1 2 4 8 9</span><br><span class="line">//最小可能距离l = 1</span><br><span class="line">//最大可能距离r = 9 - 1 = 8</span><br><span class="line">//l...mid...r</span><br><span class="line">//将mid = (1 + 8) / 2 = 4作为最小距离</span><br><span class="line"></span><br><span class="line">//第一次二分尝试</span><br><span class="line">//mid = 4</span><br><span class="line"></span><br><span class="line">//第一头牛放在隔间1</span><br><span class="line">//第二头牛放在距离隔间1至少4的下一个隔间</span><br><span class="line">//2 - 1 = 1 (x)</span><br><span class="line">//4 - 1 = 3 (x)</span><br><span class="line">//8 - 1 = 7 (o)</span><br><span class="line">//第二头牛放在隔间4</span><br><span class="line">//第三头牛放在距离隔间4至少4的下一个隔间</span><br><span class="line">//9 - 8 = 1 (x)</span><br><span class="line">//无法放置第三头牛，尝试更小的距离</span><br><span class="line">//r = mid - 1 = 3</span><br><span class="line"></span><br><span class="line">//第二次二分尝试</span><br><span class="line">//mid = (1 + 3) / 2 = 2</span><br><span class="line"></span><br><span class="line">//第一头牛放在隔间1</span><br><span class="line">//第二头牛放在距离隔间1至少3的下一个隔间</span><br><span class="line">//2 - 1 = 1 (x)</span><br><span class="line">//4 - 1 = 3 (o)</span><br><span class="line">//第二头牛放在隔间3</span><br><span class="line">//第三头牛放在距离隔间3至少4的下一个隔间</span><br><span class="line">//8 - 4 = 3 (o)</span><br><span class="line">//第三头牛放在隔间4</span><br><span class="line">//尝试更大距离</span><br><span class="line">//l = mid + 1 = 3</span><br><span class="line"></span><br><span class="line">//第三次二分尝试</span><br><span class="line">//mid = (3 + 3) / 2 = 3</span><br><span class="line">//第一头牛放在隔间1</span><br><span class="line">//第二头牛放在距离隔间1至少3的下一个隔间</span><br><span class="line">//2 - 1 = 1 (x)</span><br><span class="line">//4 - 1 = 3 (o)</span><br><span class="line">//第二头牛放在隔间3</span><br><span class="line">//第三头牛放在距离隔间3至少4的下一个隔间</span><br><span class="line">//8 - 4 = 3 (o)</span><br><span class="line">//第三头牛放在隔间4</span><br><span class="line">//尝试更大距离</span><br><span class="line">//l = mid + 1 = 4</span><br><span class="line"></span><br><span class="line">//l &gt; r时退出循环</span><br><span class="line">//ans = 3</span><br></pre></td></tr></table></figure><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N, C;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100006</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否可按最小距离放置C头牛</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;      <span class="comment">//已放置的牛数</span></span><br><span class="line"><span class="type">int</span> last = arr[<span class="number">0</span>];  <span class="comment">//上一头牛的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] - last &gt;= mid) &#123;</span><br><span class="line">count++;</span><br><span class="line">last = arr[i];</span><br><span class="line"><span class="keyword">if</span> (count == C) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最大最小距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>;           <span class="comment">//最小可能距离</span></span><br><span class="line"><span class="type">int</span> r = arr[N - <span class="number">1</span>] - arr[<span class="number">0</span>];  <span class="comment">//最大可能距离</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;    <span class="comment">//尝试更大的最小距离</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;    <span class="comment">//尝试更小的最大距离</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; N &gt;&gt; C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(arr, arr + N);</span><br><span class="line">cout &lt;&lt; <span class="built_in">BS</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳石头"><a href="#跳石头" class="headerlink" title="跳石头"></a>跳石头</h4><p><a href="https://www.luogu.com.cn/problem/P2678">https://www.luogu.com.cn/problem/P2678</a></p><h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> L, N, M;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">50005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测是否可以移走所有距离小于最短跳跃距离的石头</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> pre = <span class="number">0</span>;<span class="comment">//上一个未移除的石头的位置</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里不能直接遍历整个数组，因为可能会移除终点处的石头</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] - pre &lt; d) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pre = arr[i];  <span class="comment">//更新上一个未移除的石头位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[N + <span class="number">1</span>] - pre &lt; d) count++;</span><br><span class="line"><span class="keyword">return</span> count &lt;= M; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//找到最大最小距离</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> r = L;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid)) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; L &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">arr[N + <span class="number">1</span>] = L;</span><br><span class="line">cout &lt;&lt; <span class="built_in">BS</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二分答案法&quot;&gt;&lt;a href=&quot;#二分答案法&quot; class=&quot;headerlink&quot; title=&quot;二分答案法&quot;&gt;&lt;/a&gt;二分答案法&lt;/h2&gt;&lt;p&gt;1、估计最终答案可能范围是什么&lt;br&gt;2、分析问题的答案和给定条件的单调性，大部分的时候只需要用到自然智慧&lt;br&gt;3、建立一个f函数，当答案固定的情况下，判断给定的条件是否达标&lt;br&gt;4、在最终答案可能的范围内不断二分搜索，每次用f函数判断，直到二分结束，找到最合适的答案&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>二分查找法</title>
    <link href="http://example.com/2024/11/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
    <id>http://example.com/2024/11/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/</id>
    <published>2024-11-19T03:37:01.000Z</published>
    <updated>2024-12-03T11:01:14.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><p>二分查找法（Binary Search）是一种在有序数组或列表中快速查找目标值的算法。它通过将查找范围逐步减半，有效地减少了比较次数，时间复杂度为O(logN)，适用于数据量较大且有序的场景。</p><span id="more"></span><h3 id="左闭右闭区间-left-right"><a href="#左闭右闭区间-left-right" class="headerlink" title="左闭右闭区间 [left, right]"></a>左闭右闭区间 [left, right]</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchClosed</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; <span class="comment">// 初始化右边界为数组最后一个索引</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; <span class="comment">// 区间为 [left, right]</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 缩小右边界</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 缩小左边界</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// 找到目标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左闭右开区间-left-right"><a href="#左闭右开区间-left-right" class="headerlink" title="左闭右开区间 [left, right)"></a>左闭右开区间 [left, right)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchOpen</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n; <span class="comment">// 初始化右边界为 n（超出有效索引范围）</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 区间为 [left, right)</span></span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target)</span><br><span class="line">            right = mid; <span class="comment">// 缩小右边界，但不包括 mid</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 缩小左边界</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// 找到目标</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h2><h3 id="查找元素第一次出现的位置"><a href="#查找元素第一次出现的位置" class="headerlink" title="查找元素第一次出现的位置"></a>查找元素第一次出现的位置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchFirstOccurrence</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>; <span class="comment">// 用于记录目标值的第一个位置</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; </span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = mid;     <span class="comment">// 记录当前匹配位置</span></span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">// 继续向左查找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回找到的第一个位置，若未找到则为 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找-target的第一个元素的位置"><a href="#查找-target的第一个元素的位置" class="headerlink" title="查找&gt;&#x3D;target的第一个元素的位置"></a>查找&gt;&#x3D;target的第一个元素的位置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchFirstGE</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;   <span class="comment">// 记录满足条件的最小索引</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; </span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= target) &#123;</span><br><span class="line">            result = mid;     <span class="comment">// 记录当前索引</span></span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">// 继续向左搜索</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回找到的第一个 &gt;= target 的元素索引，未找到则返回 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找&lt;&#x3D;target的最后一个元素的位置"></a>查找&lt;&#x3D;target的最后一个元素的位置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearchLastLE</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n - <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;   <span class="comment">// 记录满足条件的最大索引</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123; </span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt;= target) &#123;</span><br><span class="line">            result = mid;     <span class="comment">// 记录当前索引</span></span><br><span class="line">            left = mid + <span class="number">1</span>;   <span class="comment">// 继续向右搜索</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 返回找到的最后一个 &lt;= target 的元素索引，未找到则返回 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找函数的根"><a href="#查找函数的根" class="headerlink" title="查找函数的根"></a>查找函数的根</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分成多个小区间，分别查找</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">BS</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (r - l &gt; <span class="number">0.0001</span>) &#123;</span><br><span class="line"><span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">f</span>(l) * <span class="built_in">f</span>(mid) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二分查找法&quot;&gt;&lt;a href=&quot;#二分查找法&quot; class=&quot;headerlink&quot; title=&quot;二分查找法&quot;&gt;&lt;/a&gt;二分查找法&lt;/h2&gt;&lt;p&gt;二分查找法（Binary Search）是一种在有序数组或列表中快速查找目标值的算法。它通过将查找范围逐步减半，有效地减少了比较次数，时间复杂度为O(logN)，适用于数据量较大且有序的场景。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>高精度算法</title>
    <link href="http://example.com/2024/11/18/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2024/11/18/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/</id>
    <published>2024-11-17T16:33:36.000Z</published>
    <updated>2024-12-28T03:52:34.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法</h2><p>高精度算法主要用于处理比普通数据类型更大的数值。普通的数据类型（如 <code>int</code>, <code>long long</code>）无法满足对非常大的数进行计算时的需求。高精度算法通过模拟手工运算过程，逐位处理数字，保证了数值的准确性和有效性。</p><p>在高精度运算中，常见的操作包括加法、减法、乘法等，它们通常在字符串中以逐位的方式实现，以应对超过普通数据类型范围的数值。</p><span id="more"></span><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><p>去除字符串的前导零</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RE0</span> <span class="params">(string &amp; str)</span> </span>&#123;</span><br><span class="line">    str.<span class="built_in">erase</span>(<span class="number">0</span>, str.<span class="built_in">find_first_not_of</span>(<span class="string">&quot;0&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        str = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>高精度加法通过逐位加法和进位处理来模拟实际的加法过程。下面是加法实现代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对齐两个字符串长度</span></span><br><span class="line">    <span class="keyword">if</span> (len1 &gt; len2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">            str2 = <span class="string">&quot;0&quot;</span> + str2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len2 &gt; len1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len2 - len1; i++) &#123;</span><br><span class="line">            str1 = <span class="string">&quot;0&quot;</span> + str1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cf = <span class="number">0</span>; <span class="comment">// 进位</span></span><br><span class="line">    len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = str1[i] - <span class="string">&#x27;0&#x27;</span> + str2[i] - <span class="string">&#x27;0&#x27;</span> + cf;</span><br><span class="line">        cf = temp / <span class="number">10</span>;  <span class="comment">// 更新进位</span></span><br><span class="line">        str = <span class="built_in">to_string</span>(temp % <span class="number">10</span>) + str;  <span class="comment">// 拼接结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (cf != <span class="number">0</span>) str = <span class="built_in">to_string</span>(cf) + str;  <span class="comment">// 如果有最终进位，加到结果前面</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p>高精度减法通过逐位减法和借位处理来模拟实际的减法过程。代码实现如下：</p><h4 id="大数减小数"><a href="#大数减小数" class="headerlink" title="大数减小数"></a>大数减小数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对齐两个字符串长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">        str2 = <span class="string">&quot;0&quot;</span> + str2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> br = <span class="number">0</span>; <span class="comment">// 借位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = (str1[i] - <span class="string">&#x27;0&#x27;</span>) - (str2[i] - <span class="string">&#x27;0&#x27;</span>) - br;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            temp += <span class="number">10</span>;  <span class="comment">// 处理借位</span></span><br><span class="line">            br = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            br = <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        str = <span class="built_in">to_string</span>(temp) + str;  <span class="comment">// 拼接结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">RE0</span>(str);  <span class="comment">// 去除多余的前导零</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任意两数"><a href="#任意两数" class="headerlink" title="任意两数"></a>任意两数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (len1 != len2) <span class="keyword">return</span> len1 &lt; len2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> str1 &lt; str2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">string str;</span><br><span class="line">string flag;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">compare</span>(str1, str2)) &#123;</span><br><span class="line"><span class="built_in">swap</span>(str1, str2);</span><br><span class="line">flag = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1 - len2; i++) &#123;</span><br><span class="line">str2 = <span class="string">&quot;0&quot;</span> + str2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> br = <span class="number">0</span>;</span><br><span class="line">len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">int</span> temp = (str1[i] - <span class="string">&#x27;0&#x27;</span>) - (str2[i] - <span class="string">&#x27;0&#x27;</span>) - br;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">temp += <span class="number">10</span>;</span><br><span class="line">br = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">br = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">str = <span class="built_in">to_string</span>(temp % <span class="number">10</span>) + str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">RE0</span>(str); </span><br><span class="line">str = flag + str;</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><p>高精度乘法通过逐位乘法和进位处理来模拟实际的乘法过程。实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">mul</span><span class="params">(string str1, string str2)</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="type">int</span> len1 = str<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = str<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">    string tempstr;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len2 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> temp = str2[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        tempstr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cf = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 添加对应的零</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len2 - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                tempstr = tempstr + <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 乘法运算</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = len1 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                t = (temp * (str1[j] - <span class="string">&#x27;0&#x27;</span>) + cf) % <span class="number">10</span>;</span><br><span class="line">                cf = (temp * (str1[j] - <span class="string">&#x27;0&#x27;</span>) + cf) / <span class="number">10</span>;</span><br><span class="line">                tempstr = <span class="built_in">to_string</span>(t) + tempstr;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (cf != <span class="number">0</span>) tempstr = <span class="built_in">to_string</span>(cf) + tempstr;  <span class="comment">// 添加进位</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 累加到结果</span></span><br><span class="line">        str = <span class="built_in">add</span>(str, tempstr);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">RE0</span>(str);  <span class="comment">// 去除前导零</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="y总版本"><a href="#y总版本" class="headerlink" title="y总版本"></a>y总版本</h2><h3 id="高精度加法-1"><a href="#高精度加法-1" class="headerlink" title="高精度加法"></a>高精度加法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line"><span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(t);</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">string a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C = <span class="built_in">add</span>(A, B);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; C[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法-1"><a href="#高精度减法-1" class="headerlink" title="高精度减法"></a>高精度减法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(string &amp;a, string &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.<span class="built_in">size</span>() != b.<span class="built_in">size</span>()) <span class="keyword">return</span> a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a &gt; b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">t = A[i] - t;</span><br><span class="line"><span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">string a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A, B, C;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">cmp</span>(a, b)) &#123;</span><br><span class="line">C = <span class="built_in">sub</span>(A, B);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">C = <span class="built_in">sub</span>(B, A);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; C[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法（高精度-低精度）"><a href="#高精度乘法（高精度-低精度）" class="headerlink" title="高精度乘法（高精度 * 低精度）"></a>高精度乘法（高精度 * 低精度）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//这里 || t 是因为进位的结果还没有存储</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">string a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C = <span class="built_in">mul</span>(A, b);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; C[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度除法（高精度-低精度）"><a href="#高精度除法（高精度-低精度）" class="headerlink" title="高精度除法（高精度 &#x2F; 低精度）"></a>高精度除法（高精度 &#x2F; 低精度）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//注意这里为了和其他高精度算法统一</span></span><br><span class="line"><span class="comment">//所以从后面往前面遍历</span></span><br><span class="line"><span class="comment">//把A倒着存进去然后再倒着输出来，实际上就相当于正着输</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">r = r * <span class="number">10</span> + A[i];</span><br><span class="line">C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">r %= b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所以这里最终的结果0在前面，而其他算法0都在后面</span></span><br><span class="line"><span class="comment">//把结果倒过来是为了删除前导0</span></span><br><span class="line"><span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">string a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C = <span class="built_in">div</span>(A, b);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">cout &lt;&lt; C[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;高精度算法&quot;&gt;&lt;a href=&quot;#高精度算法&quot; class=&quot;headerlink&quot; title=&quot;高精度算法&quot;&gt;&lt;/a&gt;高精度算法&lt;/h2&gt;&lt;p&gt;高精度算法主要用于处理比普通数据类型更大的数值。普通的数据类型（如 &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;）无法满足对非常大的数进行计算时的需求。高精度算法通过模拟手工运算过程，逐位处理数字，保证了数值的准确性和有效性。&lt;/p&gt;
&lt;p&gt;在高精度运算中，常见的操作包括加法、减法、乘法等，它们通常在字符串中以逐位的方式实现，以应对超过普通数据类型范围的数值。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="高精度" scheme="http://example.com/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
</feed>
